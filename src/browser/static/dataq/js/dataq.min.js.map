{"version":3,"sources":["dataq.js","dq-api.js","dq-filter-modal.js","dq-grouping-modal.js","dq-next-aggregate.js","dq-query-builder.js","dq-query.js","dq-rls-policy-builder.js","dq-rls-policy.js","dq-sort-modal.js","dq-table-modal.js"],"names":["window","DataQ","query","policy","callback","DQ","repo_name","cb","container","$","templates","append","Query","repo","click","remove","DQ_rls_policy","Policy","display_query","html","get_selected_tables","forEach","selected_table","selected_columns","column_list","selected_column","agg","push","name","table_name","join","get_filters","filter","group_strings","grouping","group","string","length","sort_strings","sorts","sort","document","on","TableModal","this","data","operated_column","split","update_grouping","FilterModal","code","parent","delete_filter","GroupingModal","SortModal","build_query","build_policy","API","get_repos","get","get_tables","get_schema","table","q","modal","columns","schema","column","column_name","full_name","keyboard","filter1","val","filter2","op","add_filter","alert","replace","sortable","forcePlaceholderSize","new_grouping","each","current_group","li","number_types","is_number","i","next_numeric_aggregate","none","max","min","sum","count","avg","next_nonnumeric_aggregate","next_aggregate","columntype","current_aggregate","select_list","from_list","where_list","group_list","order_list","undefined","query_string","trim","that","_schema_for_table_name","_repo_name","_operated_column","_selected_columns_for_table","_filter_for_code","_grouping","_sorts","has_operated_column","tbls","k","filter_string","md5","Date","getTime","result","add_sort","delete_sort","policy_name","command","role_list","roles","using_expr","using_expression","check_expr","check_expression","policy_string","_name","_table","_command","_roles","_using_expr","_check_expr","cmd","Array","expr","update_list","list","create_items_in_dropdown","item","used_dict","items","type","hide","populate_column_list","dropdown","tables","item_name","text","show","a","b","element","find","prop","parent_li","columnname","currentaggregate","nextaggregate","is_op_col_checked","is"],"mappings":"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","file":"dataq.min.js","sourcesContent":["/**\n * Defines the DataQ.DQ object, which is what the user of the library will interact with.\n *\n * Simply call DataQ.DQ(repo_name, callback) and DataQ will launch. After the user builds a query,\n * the callback is executed as callback(query), where query is a String representing the SQL query\n * or null if the query was not built successfully.\n */\n(function() {\n  // Create the global DataQ object if it doesn't exist.\n  window.DataQ = window.DataQ || {};\n\n  // The DataQ.Query that may be built.\n  query = null;\n\n  // The DataQ.Policy object that may be built.\n  policy = null;\n\n  // The callback to execute after the { query | policy } is built. It is executed as\n  // { cb(query) | cb(policy) } where { query | policy } is a String representing the\n  // SQL { query | policy } or null if the { query | policy } was not built.\n  var callback;\n\n  /**\n   * @param repo_name - The name of the repo that DataQ should work on.\n   * @param cb - The callback to trigger when the query is built.\n   */\n  DataQ.DQ = function(repo_name, cb) {\n    // Set the callback.\n    callback = cb;\n\n    // Add the container to the page.\n    var container = $(DataQ.templates[\"dataq-container\"]());\n    $('body').append(container);\n\n    // Create the query object and set the repo name.\n    query = DataQ.Query();\n    query.repo(repo_name);\n\n    // Handle DataQ close when clicking backdrop.\n    $(\".dq-black-background\").click(function() {\n      $(\".dq-black-background\").remove();\n      $(\".dataq\").remove();\n      callback(null);\n    })\n  };\n\n  /**\n   * @param repo_name - The name of the repo that DataQ should work on.\n   * @param cb - The callback to trigger when the query is built.\n   */\n  DataQ.DQ_rls_policy = function(repo_name, cb) {\n    // Set the callback.\n    callback = cb;\n\n    // Add the container to the page.\n    var container = $(DataQ.templates[\"dataq-container-rls-policy\"]());\n    $('body').append(container);\n\n    // Create the policy object and set the repo name.\n    policy = DataQ.Policy();\n    policy.repo(repo_name);\n\n    // Handle DataQ close when clicking backdrop.\n    $(\".dq-black-background\").click(function() {\n      $(\".dq-black-background\").remove();\n      $(\".dataq\").remove();\n      callback(null);\n    });\n  };\n\n  /**\n   * Update the UI to reflect the latest query.\n   */\n  var display_query = function() {\n\n    /**********************************/\n    /*** 1: Selected Tables/Columns ***/\n    /**********************************/\n    $('.dq-selected-tables').html(\"\");\n    query.get_selected_tables().forEach(function(selected_table) {\n      var selected_columns = query.selected_columns(selected_table);\n      if (selected_columns === null) {\n        return;\n      }\n\n      // Go through each column for the table and add it to the column list.\n      var column_list = [];\n      selected_columns.forEach(function(selected_column) {\n        if (selected_column.agg === \"none\") {\n          column_list.push(selected_column.name);\n        } else {\n          // If col has an aggregate, write it as \"aggregate(col)\".\n          column_list.push(selected_column.agg + \"(\" + selected_column.name + \")\");\n        }\n      });\n\n      // Add the table and column list to the UI.\n      var html = DataQ.templates[\"dq-selected-table\"]({\n        \"table_name\": selected_table,\n        \"column_list\": column_list.join(\", \")\n      });\n      $('.dq-selected-tables').append(html);\n    });\n\n    /***************************/\n    /*** 2: Selected Filters ***/\n    /***************************/\n    $('.dq-filter-list').html(\"\");\n    query.get_filters().forEach(function(filter) {\n      $('.dq-filter-list').append(DataQ.templates['dq-filter-list-item']({\n        \"filter\": filter\n      }));\n    });\n\n    /**************************/\n    /*** 3: Selected Groups ***/\n    /**************************/\n    // Identify which groups are checked.\n    var group_strings = [];\n    query.grouping().forEach(function(group) {\n      group_strings.push(group.string);\n    });\n\n    // Display the groups.\n    if (group_strings.length > 0) {\n      $(\".dq-grouping-text\").html(group_strings.join(\", \"));\n    } else {\n      $(\".dq-grouping-text\").html(\"No Grouping...\");\n    }\n\n    /************************************/\n    /*** 4: Identify the Sort Columns ***/\n    /************************************/\n    var sort_strings = [];\n    query.sorts().forEach(function(sort) {\n      sort_strings.push(sort.string);\n    });\n\n    // Display the sorts.\n    if (sort_strings.length > 0) {\n      $(\".dq-sorting-text\").html(sort_strings.join(\", \"));\n    } else {\n      $(\".dq-sorting-text\").html(\"No Sorting...\");\n    }\n\n  }; // end display_query\n\n  // Handle table additions.\n  $(document).on(\"click\", \".dq-btn-add-table\", function() {\n    DataQ.TableModal(query, null, display_query);\n  });\n\n  // Handle table deletes.\n  $(document).on(\"click\", \".dq-btn-delete-table\", function() {\n    var table_name = $(this).data(\"tablename\");\n    if (query.operated_column() && query.operated_column().split(\".\")[0] === table_name) {\n      query.operated_column(null);\n    }\n    query.selected_columns(table_name, null);\n    query.update_grouping();\n    display_query();\n  });\n\n  // Handle table edits.\n  $(document).on(\"click\", \".dq-btn-edit-table\", function() {\n    DataQ.TableModal(query, $(this).data(\"tablename\"), display_query);\n  });\n\n  // Handle filter additions.\n  $(document).on(\"click\", \".dq-btn-add-filter\", function() {\n    DataQ.FilterModal(query, display_query);\n  });\n\n  // Handle filter deletion.\n  $(document).on(\"click\", \".dq-btn-delete-filter\", function() {\n    var code = $(this).parent().data(\"code\");\n    query.delete_filter(code);\n    display_query();\n  });\n\n  // Handle grouping edit.\n  $(document).on(\"click\", \".dq-btn-edit-grouping\", function() {\n    DataQ.GroupingModal(query, display_query);\n  });\n\n  // Handle sorting edit.\n  $(document).on(\"click\", \".dq-btn-edit-sorting\", function() {\n    DataQ.SortModal(query, display_query);\n  });\n\n  // Handle DataQ cancel.\n  $(document).on(\"click\", \".dq-btn-cancel-query\", function() {\n    $(\".dq-black-background\").remove();\n    $(\".dataq\").remove();\n    callback(null);\n  });\n\n  // Handle DataQ run query.\n  $(document).on(\"click\", \".dq-btn-run-query\", function() {\n    $(\".dq-black-background\").remove();\n    $(\".dataq\").remove();\n    callback(DataQ.build_query(query));\n  });\n\n  // Handle DataQ run policy.\n  $(document).on(\"click\", \".dq-btn-run-policy\", function() {\n    // Build policy object\n    \n\n    // Close DataQ\n    $(\".dq-black-background\").remove();\n    $(\".dataq\").remove();\n\n    // Build policy string\n    callback(DataQ.build_policy(policy));\n  });\n})();\n","/**\n * Helper for accessing DataQ API.\n */\n(function() {\n  // Create the global DataQ object if it doesn't exist.\n  window.DataQ = window.DataQ || {};\n\n  DataQ.API = {};\n\n  // See dataq/views.py for description of result.\n  DataQ.API.get_repos = function(callback) {\n    $.get(\"/apps/dataq/api/\", callback);\n  };\n\n  // See dataq/views.py for description of result.\n  DataQ.API.get_tables = function(repo, callback) {\n    $.get(\"/apps/dataq/api/\" + repo + \"/\", callback);\n  };\n\n  // See dataq/views.py for description of result.\n  DataQ.API.get_schema = function(repo, table, callback) {\n    $.get(\"/apps/dataq/api/\" + repo + \"/\" + table + \"/\", callback);\n  };\n})();\n","/**\n * The modal window that allows the user to create filters (of the form <val1> <operation> <val2>).\n *\n * The modal window is a bootstrap modal.\n */\n(function() {\n  // If the global DataQ object does not exist, create it.\n  window.DataQ = window.DataQ || {};\n\n  // The callback to trigger when the modal is closed. This is executed as callback().\n  var callback;\n\n  // The DataQ.Query object being built.\n  var query;\n\n  /**\n   * Launch the modal.\n   *\n   * @param q - The DataQ.Query object being built.\n   * @param cb - The callback to execute when the filter has been added. It will be executed\n   *                   as cb().\n   */\n  DataQ.FilterModal = function(q, cb) {\n    // Set the instance variables.\n    callback = cb;\n    query = q;\n\n    // If the modal does not exist, create it.\n    var modal = $(\"#dq-filter-modal\");\n    if (modal.length === 0) {\n      var columns = [];\n\n      // Iterate through each column of each selected table and add to the list of columns.\n      query.get_selected_tables().forEach(function(selected_table) {\n        query.schema(selected_table).forEach(function(column) {\n          columns.push({\n            \"column_name\": column[0],\n            \"table_name\": selected_table,\n            \"full_name\": selected_table + \".\" + column[0]\n          });\n        });\n      });\n\n      // Create the HTML for the filter modal.\n      var html = DataQ.templates['dq-filter-modal']({\n        \"columns\": columns,\n        \"repo\": query.repo()\n      });\n\n      // Add the modal to the page.\n      $('body').append(html);\n    }\n\n    // Display the modal (disable Esc)\n    $('#dq-filter-modal').modal({\n      keyboard: false\n    });\n\n    // Handle modal close when clicking backdrop.\n    $(\".modal-backdrop\").click(function() {\n      callback();\n      $(\"#dq-filter-modal\").remove();\n    })\n  } // End FilterModal\n\n  // Handle modal close.\n  $(document).on(\"click\", \".dq-filter-quit\", function() {\n    callback();\n    $(\"#dq-filter-modal\").remove();\n    $(\".modal-backdrop\").remove();\n  });\n\n  // Handle modal done.\n  $(document).on(\"click\", \".dq-filter-done\", function() {\n    var filter1 = $('.dq-filter-1-text').val();\n    var filter2 = $('.dq-filter-2-text').val();\n    var op = $('.dq-filter-op-text').val();\n    if (filter1.length > 0 && filter2.length > 0 && op.length > 0) {\n      query.add_filter(filter1, op, filter2);\n      callback();\n      $('#dq-filter-modal').modal('hide');\n      $(\"#dq-filter-modal\").remove();\n      $(\".modal-backdrop\").remove();\n    } else {\n      alert(\"You need to fill out the three text boxes\");\n    }\n  });\n\n  // Handle filter1 dropdown link click (in <filter1> <operation> <filter2>)\n  $(document).on(\"click\", \".dq-filter-1-link\", function() {\n    $('.dq-filter-1-text').val($(this).html());\n  });\n\n  // Handle filter2 dropdown link click (in <filter1> <operation> <filter2>)\n  $(document).on(\"click\", \".dq-filter-2-link\", function() {\n    $('.dq-filter-2-text').val($(this).html());\n  });\n\n  // Handle operation dropdown link click (in <filter1> <operation> <filter2>)\n  $(document).on(\"click\", \".dq-filter-op-link\", function() {\n    // Unescape html for > and <\n    var op = $(this).html().replace(\"&gt;\", \">\").replace(\"&lt;\", \"<\");\n    $('.dq-filter-op-text').val(op);\n  });\n\n})();\n","/***\n * The modal window for editing the groupings.\n *\n * The modal window is a bootstrap modal.\n */\n(function() {\n  // If the global DataQ object does not exist, create it.\n  window.DataQ = window.DataQ || {};\n\n  // The callback to trigger when the modal is closed. This is executed as callback().\n  var callback;\n\n  // The DataQ.Query object being built.\n  var query;\n\n  /**\n   * Launch the modal.\n   *\n   * @param q - The DataQ.Query object being built.\n   * @param cb - The callback to execute when the grouping has been modified. It will be executed\n   *              as cb().\n   */\n  DataQ.GroupingModal = function(q, cb) {\n    // Set the instance variables.\n    query = q;\n    callback = cb;\n\n    // Create the modal HTML if it doesn't exist.\n    var modal = $(\"#dq-grouping-modal\");\n    if (modal.length === 0) {\n      var html = DataQ.templates[\"dq-grouping-modal\"]({\n        columns: query.grouping()\n      });\n      $(\"body\").append(html);\n    }\n\n    // Display the modal. (disable Esc)\n    $(\"#dq-grouping-modal\").modal({\n      keyboard: false\n    });\n\n    // When the modal is displayed, enable HTML5Sortable.\n    $(\"#dq-grouping-modal\").on(\"shown.bs.modal\", function() {\n      $(\".dq-grouping-modal-list\").sortable({\n        forcePlaceholderSize: true\n      });\n    });\n\n    // Handle modal close when clicking backdrop.\n    $(\".modal-backdrop\").click(function() {\n      callback();\n      $(\"#dq-grouping-modal\").remove();\n      $(\".modal-backdrop\").remove();\n    })\n  }; // End GroupingModal\n\n  // Handler for close modal.\n  $(document).on(\"click\", \"#dq-grouping-modal-quit-btn\", function() {\n    callback();\n    $(\"#dq-grouping-modal\").remove();\n    $(\".modal-backdrop\").remove();\n  });\n\n  // Handle for finishing edits.\n  $(document).on(\"click\", \"#dq-grouping-modal-done-btn\", function() {\n    var new_grouping = [];\n\n    // Iterate through each list item (in order).\n    $(\".dq-grouping-list-item\").each(function() {\n      var li = $(this);\n      var string = li.data(\"string\");\n      var grouping = query.grouping();\n      var current_group;\n\n      // Find the group associated with this list item.\n      query.grouping().forEach(function(group) {\n        if (group.string === string) {\n          current_group = group;\n        }\n      });\n\n      new_grouping.push(current_group);\n    });\n\n    query.grouping(new_grouping);\n    callback();\n    $(\"#dq-grouping-modal\").remove();\n    $(\".modal-backdrop\").remove();\n  });\n\n})();\n","/**\n * Helper function to return the next aggregate for a given column type.\n * ex. max, min, avg, sum, count.\n *\n * This is useful to cycle through the possible aggregates as user clicks a column.\n * col1 --click--> max(col1) --click--> min(col1), etc.\n */\n(function() {\n  window.DataQ = window.DataQ || {};\n\n  // Numeric types supported in PostgreSQL.\n  var number_types = [\"bigint\", \"int8\", \"bigserial\", \"serial8\", \"double precision\", \"float8\", \n    \"integer\", \"int\", \"int4\", \"real\", \"float4\", \"smallint\", \"int2\", \"serial\", \"serial4\"];\n\n  // Turn number_types into a Javascript object for more efficient lookup.\n  // key = PostgreSQL type, val = true iff key is a numeric type.\n  var is_number = {};\n  for (var i = 0; i < number_types; i++) {\n    is_number[number_types[i]] = true;\n  }\n\n  // Helper for cycling through numeric aggregates.\n  // key = aggregate, value = next aggregate\n  // For example, a cycle (beginning at none) would be:\n  // none -> max -> min -> sum -> count -> avg -> none\n  var next_numeric_aggregate = {\n    \"none\": \"max\",\n    \"max\": \"min\",\n    \"min\": \"sum\",\n    \"sum\": \"count\",\n    \"count\": \"avg\",\n    \"avg\": \"none\"\n  };\n\n  // Helper for cycling through non-numeric aggregates.\n  var next_nonnumeric_aggregate = {\n    \"none\": \"count\",\n    \"count\": \"none\"\n  };\n\n\n  /**\n   * Determine the next aggregate in the cycle for the given column type and the current aggregate.\n   *\n   * @param columntype - The PostgreSQL type of the column.\n   * @param current_aggregate - The current aggregate operator applied to the column (ex. max, min)\n   *                            If no aggregate has been applied, this value should be either null\n   *                            or \"none\".\n   * @return  The next aggregate in the cycle.\n   */\n  DataQ.next_aggregate = function(columntype, current_aggregate) {\n    if (current_aggregate === null) {\n      current_aggregate = \"none\";\n    }\n    if (is_number[columntype]) {\n      return next_numeric_aggregate[current_aggregate];\n    } else {\n      return next_nonnumeric_aggregate[current_aggregate];\n    }\n  };\n})();\n","/**\n * Logic for constructing a SQL query string from a DataQ.Query object.\n */\n(function() {\n  // If the global DataQ object does not exist, create it.\n  window.DataQ = window.DataQ || {};\n\n  /**\n   * Take a DataQ.Query object and generate a SQL query string from it.\n   *\n   * @param query - The DataQ.Query object.\n   * @return A String representing the SQL query.\n   */\n  window.DataQ.build_query = function(query) {\n\n    // The list of columns to select.\n    var select_list = [];\n\n    // The list of tables to select from.\n    var from_list = [];\n\n    // The filters to apply.\n    var where_list = [];\n\n    // The grouping to perform.\n    var group_list = [];\n\n    // The sorting to apply.\n    var order_list = [];\n\n    // Get the current repo name - we'll need to prepend this to some of the table/column names.\n    var repo = query.repo();\n\n    // Create the FROM clause. It is simply the list of tables that the user has selected.\n    // Each item in the list is a String of the form: \"repo.table\".\n    query.get_selected_tables().forEach(function(table) {\n      from_list.push(repo + \".\" + table);\n    });\n\n    // Create the SELECT clause.\n    // Iterate through every selected column of every selected table and add the column to the \n    // select list (and write the aggregate if possible).\n    query.get_selected_tables().forEach(function(table) {\n      query.selected_columns(table).forEach(function(column) {\n        if (column.agg === undefined || column.agg === null || column.agg === \"none\") {\n          select_list.push(repo + \".\" + table + \".\" + column.name);\n        } else {\n          // When an aggregate \"agg\" on column \"col\" in table \"table\" and repo \"repo\" appears, mark\n          // \"agg(repo.table.col) as agg_table_col\".\n          select_list.push(column.agg + \"(\" + repo + \".\" + table + \".\" + column.name + \")\" + \n            \" as \" + column.agg + \"_\" + table + \"_\"\n            + column.name);\n        }\n      });\n    });\n\n    // Create the WHERE clause.\n    // Simply iterate through each filter and add it to the list.\n    query.get_filters().forEach(function(filter) {\n      where_list.push(filter.filter1 + \" \" + filter.op + \" \" + filter.filter2);\n    });\n\n    // Create the  GROUP BY clause.\n    query.grouping().forEach(function(group) {\n      var agg = group.column.agg;\n\n      // We can only add a group by if it's not the aggregate column.\n      if (agg === null || agg === undefined || agg === \"none\") {\n        group_list.push(repo + \".\" + group.string);\n      } \n    });\n\n    // Create the ORDER BY clause.\n    query.sorts().forEach(function(sort) {\n      var agg = sort.column.agg;\n      if (agg === null || agg === undefined || agg === \"none\") {\n        order_list.push(repo + \".\" + sort.string);\n      } else {\n        order_list.push(agg + \"_\" + sort.table + \"_\" + sort.column.name);\n      }\n    });\n\n    // Set the query string.\n    if (select_list.length === 0) {\n      return \"\";\n    }\n    var query_string = \"SELECT \" + select_list.join(\", \")\n        + \" FROM \" + from_list.join(\", \");\n\n    // Set the where list.\n    if (where_list.length > 0) {\n      query_string +=  \" WHERE \" + where_list.join(\" AND \");\n    }\n\n    // Set the group list.\n    if (group_list.length > 0) {\n      query_string += \" GROUP BY \" + group_list.join(\", \")\n    }\n\n    // Set the order list.\n    if (order_list.length > 0) {\n      query_string += \" ORDER BY \" + order_list.join(\", \")\n    }\n\n    // Remove leading and trailing spaces and then append semicolon.\n    query_string.trim();\n    query_string += \";\";\n    return query_string;\n  };\n})();\n","/**\n * The object for building a query.\n */\n(function() {\n  // If the DataQ object doesn't exist, create it.\n  window.DataQ = window.DataQ || {};\n\n  DataQ.Query = function() {\n    \n    // Create the object and initialize the objects.\n    var that = {};\n    that._schema_for_table_name = {};\n    that._repo_name = null;\n    that._operated_column = null;\n    that._selected_columns_for_table = {};\n    that._filter_for_code = {};\n    that._grouping = [];\n    that._sorts = {};\n\n    /**\n     * Get or set the schema for a given table.\n     *\n     * @param table_name - The name of the table.\n     * @param schema - If this argument is omitted (or undefined), this function acts as a getter\n     *                returning the schema for the given table. Otherwise, the function acts as a \n     *                setter, setting the schema for table_name.\n     *\n     * @return The schema for the table name.\n     */\n    that.schema = function(table_name, schema) {\n      if (schema !== undefined) {\n        that._schema_for_table_name[table_name] = schema;\n      } \n      return that._schema_for_table_name[table_name];\n    };\n\n    /**\n     * Get or set the repo name.\n     *\n     * @param repo_name - If this argument is omitted (or undefined), this function acts as a \n     *                    getter. Otherwise, it acts as a setter, setting the repo name.\n     *\n     * @return The name of the repo.\n     */\n    that.repo = function(repo_name) {\n      if (repo_name !== undefined) {\n        that._repo_name = repo_name;\n      }\n      return that._repo_name;\n    };\n\n    /**\n     * Get or set the operated column.\n     *\n     * @param operated_column - if this argument is omitted (or undefined), this function acts as\n     *                          a getter. Otherwise, it acts a setter, setting the operated column.\n     *\n     * @return The name of the operated column (\"table.col\"). This may be null.\n     */\n    that.operated_column = function(operated_column) {\n      if (operated_column !== undefined) {\n        that._operated_column = operated_column;\n      }\n      return that._operated_column;\n    };\n\n    that.update_grouping = function() {\n      that._grouping = [];\n      var has_operated_column = false;\n      for (var table in that._selected_columns_for_table) {\n        if (!that._selected_columns_for_table[table]) {\n          continue;\n        }\n        that._selected_columns_for_table[table].forEach(function(column) {\n          if (column.agg === \"none\") {\n            that._grouping.push({\n              \"string\": table + \".\" + column.name,\n              \"table\": table,\n              \"column\": column\n            });\n          } else {\n            has_operated_column = true;\n          }\n        });\n      } // end for each table\n\n      if (!has_operated_column) {\n        that._grouping = [];\n      }\n    };\n\n    that.selected_columns = function(table_name, selected_columns) {\n      if (selected_columns !== undefined) {\n        that._selected_columns_for_table[table_name] = selected_columns;\n      }\n      return that._selected_columns_for_table[table_name];\n    };\n\n    that.get_selected_tables = function() {\n      var tbls = [];\n      for (var k in that._selected_columns_for_table) {\n        tbls.push(k);\n      }\n      return tbls;\n    };\n\n    that.add_filter = function(filter1, op, filter2) {\n      var filter_string = filter1 + \" \" + op + \" \" + filter2;\n      var code = md5((new Date()).getTime() + filter_string);\n      that._filter_for_code[code] = {\n        \"filter1\": filter1,\n        \"op\": op,\n        \"filter2\": filter2,\n        \"filter_string\": filter_string\n      };\n      return that._filter_for_code[code];\n    };\n\n    that.delete_filter = function(code) {\n      that._filter_for_code[code] = undefined;\n    };\n\n    that.get_filters = function() {\n      var result = [];\n      for (var k in that._filter_for_code) {\n        var filter = that._filter_for_code[k];\n        if (!filter) {\n          continue;\n        }\n        result.push({\n          \"code\": k,\n          \"filter1\": filter.filter1,\n          \"op\": filter.op,\n          \"filter2\": filter.filter2,\n          \"filter_string\": filter.filter_string\n        });\n      };\n      return result;\n    };\n\n    that.grouping = function(grouping) {\n      if (grouping !== undefined) {\n        that._grouping = grouping;\n      }\n      return that._grouping;\n    };\n\n    that.add_sort = function(sort) {\n      that._sorts[sort.string] = sort;\n    };\n\n    that.delete_sort = function(sort) {\n      that._sorts[sort] = undefined;\n    };\n\n    that.sorts = function() {\n      var result = [];\n      for (var k in that._sorts) {\n        if (that._sorts[k] !== undefined) {\n          result.push(that._sorts[k]);\n        }\n      }\n      return result;\n    };\n\n    return that;\n  };\n})();\n","/**\n* Logic for constructing a PostgreSQL CREATE POLICY command from a\n* DataQ.policy object.\n*/\n(function() {\n  // If the global DataQ object does not exist, create it.\n  window.DataQ = window.DataQ || {};\n\n  /**\n   * Take a DataQ.Policy object and generate a CREATE POLICY string from it.\n   * A CREATE POLICY command looks like:\n   *\n   * CREATE POLICY name ON table_name\n   *    [ FOR { ALL | SELECT | INSERT | UPDATE | DELETE } ]\n   *    [ TO { role_name | PUBLIC | CURRENT_USER | SESSION_USER } [, ...] ]\n   *    [ USING ( using_expression ) ]\n   *    [ WITH CHECK ( check_expression ) ]\n   *\n   * see https://www.postgresql.org/docs/9.5/static/sql-createpolicy.html\n   *\n   * @param policy - The DataQ.policy object.\n   * @return A String representing the CREATE POLICY command.\n   */\n  window.DataQ.build_policy = function(policy) {\n\n    // Name of policy to be created.\n    var policy_name = policy.name();\n\n    // Name of table to which the policy applies.\n    var table_name = policy.repo() + \".\" + policy.name();\n\n    // Command to which the policy applies.\n    var command = policy.command();\n\n    // List of roles to which the policy applies.\n    var role_list = policy.roles();\n\n    // SQL conditional expression to control row visibility.\n    // Rows for which the expression returns true will be visible.\n    var using_expr = policy.using_expression();\n\n    // SQL conditional expression to control INSERT and UPDATE privileges.\n    // Only rows for which the expression evaluates to true will be allowed.\n    var check_expr = policy.check_expression();\n\n    /* Build policy string */\n    var policy_string = \"CREATE POLICY \" + policy_name;\n\n    // ON clause\n    policy_string += \" ON \" + table_name;\n\n    // FOR clause\n    policy_string += \" FOR \" + command;\n\n    // TO clause\n    policy_string += \" TO \" + role_list.join(\", \");\n\n    // USING clause\n    policy_string += \" USING \" + using_expr;\n\n    // WITH CHECK clause\n    if (command !== \"SELECT\") {\n      // A SELECT policy cannot have a WITH CHECK expression, as it only applies\n      // in cases where records are being retrieved from the relation.\n      policy_string += \" WITH CHECK \" + check_expr;\n    }\n\n    // Remove leading and trailing spaces and then append semicolon.\n    policy_string.trim();\n    policy_string += \";\";\n\n    return policy_string;\n\n  };\n})();\n","/**\n* The object for building a row-level security policy.\n*/\n(function() {\n  // If the DataQ object doesn't exist, create it.\n  window.DataQ = window.DataQ || {};\n\n  DataQ.Policy = function() {\n\n    // Create the object and initialize its contents.\n    var that = {};\n    that._repo_name = null;\n    that._name = null;\n    that._table = null;\n    that._command = null;\n    that._roles = [];\n    that._using_expr = null;\n    that._check_expr = null;\n\n    /**\n     * Get or set the repo name.\n     *\n     * @param repo_name - If this argument is omitted (or undefined), this function acts as a\n     *                    getter. Otherwise, it acts as a setter, setting the repo name.\n     *\n     * @return The name of the repo.\n     */\n    that.repo = function(repo_name) {\n      if (repo_name !== undefined) {\n        that._repo_name = repo_name;\n      }\n      return that._repo_name;\n    };\n\n    /**\n     * Get or set the name of the policy.\n     *\n     * @param policy_name - If this argument is omitted (or undefined), this function acts as a\n     *                    getter. Otherwise, it acts as a setter, setting the repo name.\n     *\n     * @return The name of the policy.\n     */\n    that.name = function(policy_name) {\n      if (policy_name !== undefined) {\n        that._name = policy_name;\n      }\n      return that._name;\n    };\n\n    /**\n     * Get or set the name of the table to which this policy will apply.\n     *\n     * @param table_name - If this argument is omitted (or undefined), this function acts as a\n     *                    getter. Otherwise, it acts as a setter, setting the repo name.\n     *\n     * @return The name of the table.\n     */\n    that.table = function(table_name) {\n      if (table_name !== undefined) {\n        that._table = table_name;\n      }\n      return that._table;\n    };\n\n    /**\n     * Get or set the command { ALL | SELECT | INSERT| UPDATE | DELETE } to which\n     * this policy will apply.\n     *\n     * @param cmd - If this argument is omitted (or undefined), this function acts as a\n     *                    getter. Otherwise, it acts as a setter, setting the repo name.\n     *\n     * @return The name of the command.\n     */\n    that.command = function(cmd) {\n      if (cmd !== undefined) {\n        that._command = cmd;\n      }\n      return that._command;\n    };\n\n    /**\n     * Get or set the Roles to which this policy will apply.\n     *\n     * @param role_list - If this argument is omitted (or undefined), this function acts as a\n     *                    getter. Otherwise, it acts as a setter, setting the repo name.\n     *\n     * @return The list of Roles.\n     */\n    that.roles = function(role_list) {\n      if (role_list !== undefined) {\n        if (!(role_list instanceof Array)) {\n          role_list = [role_list]\n        }\n        that._roles = role_list;\n      }\n      return that._roles;\n    };\n\n    /**\n     * Get or set the policy's using_expression.\n     *\n     * @param expr - If this argument is omitted (or undefined), this function acts as a\n     *                    getter. Otherwise, it acts as a setter, setting the repo name.\n     *\n     * @return The full using_expression.\n     */\n    that.using_expression = function(expr) {\n      if (expr !== undefined) {\n        that._using_expr = expr;\n      }\n      return that._using_expr;\n    };\n\n    /**\n     * Get or set the policy's check_expression.\n     *\n     * @param expr - If this argument is omitted (or undefined), this function acts as a\n     *                    getter. Otherwise, it acts as a setter, setting the repo name.\n     *\n     * @return The full check_expression.\n     */\n    that.check_expression = function(expr) {\n      if (expr !== undefined) {\n        that._check_expr = expr;\n      }\n      return that._check_expr;\n    };\n\n    return that;\n\n  };\n})();\n","/**\n * The modal window that allows the user to specify the sorting of the columns.\n *\n * The modal window is a bootstrap modal.\n */\n(function() {\n  // If the global DataQ object does not exist, create it.\n  window.DataQ = window.DataQ || {};\n\n  // The callback to trigger whent he modal is closed.\n  var callback;\n\n  // The DataQ.Query object being built.\n  var query;\n\n  /**\n   * Launch the modal.\n   *\n   * @param q - The DataQ.Query object being built.\n   * @param cb - The callback to trigger when the user finishes specifying sorts. It is executed as\n   *              cb().\n   */\n  DataQ.SortModal = function(q, cb) {\n    // Set the instance variables.\n    query = q;\n    callback = cb;\n\n    // If the modal HTML does not exist, add it to the page.\n    var modal = $(\"#dq-sort-modal\");\n    if (modal.length === 0) {\n      var html = DataQ.templates['dq-sort-modal']();\n      $('body').append(html);\n    }\n\n    // Display the modal (disable Esc)\n    $('#dq-sort-modal').modal({\n      keyboard: false\n    });\n\n    // When the modal is shown, populate the columns.\n    $(\"#dq-sort-modal\").on(\"shown.bs.modal\", function() {\n      update_list();\n    });\n\n    // Handle modal close when clicking backdrop.\n    $(\".modal-backdrop\").click(function() {\n      $(\"#dq-sort-modal\").remove();\n      $(\".modal-backdrop\").remove();\n      callback();\n    })\n  };\n\n  // Handle dropdown item click.\n  $(document).on(\"click\", \".dq-sort-modal-dropdown-btn\", function() {\n    var list = $('.dq-sort-modal-dropdown');\n    list.html(\"\");\n\n    // When a dropdown link is clicked, add it to the list of selected columns.\n    create_items_in_dropdown().forEach(function(item) {\n      list.append(DataQ.templates[\"dq-sort-dropdown-li\"]({\n        \"item\": item\n      }));\n    });\n\n  });\n\n  // Create the items in the sort dropdown menu.\n  var create_items_in_dropdown = function() {\n    // Identify the sorts that have already been used.\n    var used_dict = {};\n    query.sorts().forEach(function(sort) {\n      used_dict[sort.string] = true;\n    });\n\n    // Iterate through every column of every selected table and, if it isn't used, add it to the\n    // list of items.\n    var items = [];\n    query.get_selected_tables().forEach(function(selected_table) {\n      query.selected_columns(selected_table).forEach(function(column) {\n        var string = selected_table + \".\" + column.name;\n        if (column.agg !== \"none\") {\n          string = column.agg + \"(\" + selected_table + \".\" + column.name + \")\";\n        }\n\n        // Don't add any item to dropdown if it's already used.\n        if (used_dict[string]) {\n          return;\n        }\n\n        items.push({\n          \"string\": string,\n          \"table\": selected_table,\n          \"column\": column\n        });\n\n      });\n    });\n\n    return items;\n  };\n\n  // Add the list items to list of used sorts.\n  var update_list = function() {\n    var list = $('.dq-sort-item-list');\n    list.html(\"\");\n    query.sorts().forEach(function(sort) {\n      var html = DataQ.templates[\"dq-sort-list-item\"]({\n        \"item\": sort\n      });\n      list.append(html);\n    });\n  };\n\n  // Handle modal close.\n  $(document).on(\"click\", \".dq-sort-modal-quit\", function() {\n    $('#dq-sort-modal').remove();\n    $(\".modal-backdrop\").remove();\n    callback();\n  });\n\n  // Handle sort clicked.\n  $(document).on(\"click\", \".dq-sort-link\", function() {\n    var li = $(this);\n    var name = li.data(\"columnname\");\n    var type = li.data(\"columntype\");\n    var agg = li.data(\"aggregate\");\n    var table = li.data(\"table\");\n    var string = li.data(\"string\");\n\n    if (agg === undefined || agg === null) {\n      agg = \"none\";\n    }\n\n    var item = {\n      \"column\": {\n        \"name\": name,\n        \"type\": type,\n        \"agg\": agg\n      },\n      \"string\": string,\n      \"table\": table\n    };\n\n    query.add_sort(item);\n    update_list();\n\n  });\n\n  // Handle modal close.\n  $(document).on(\"click\", \".dq-sort-modal-done-btn\", function() {\n    $('#dq-sort-modal').remove();\n    $(\".modal-backdrop\").remove();\n    callback();\n  });\n\n  // Handle delete sort.\n  $(document).on(\"click\", \".dq-sort-delete-btn\", function() {\n    var li = $(this).parent().parent();\n    var string = li.data(\"string\");\n    query.delete_sort(string);\n    update_list();\n  });\n\n})();\n","/**\n * The modal window that allows the user to select the tables (and columns from these tables) that\n * they want to use in their query.\n *\n * This modal can be used to either ADD a new table (and some of its columns) to the query or to\n * EDIT an existing table (and its columns) that is already in the query.\n *\n * The modal window is a bootstrap modal.\n */\n(function() {\n  // If the global DataQ object does not exist, create it.\n  window.DataQ = window.DataQ || {};\n\n  // The callback to trigger when the modal is closed.\n  var cb;\n\n  // The table we have selected.\n  var table;\n\n  // The DataQ.Query object being built.\n  var query;\n\n  /**\n   * Launch the modal.\n   *\n   * @param q - The DataQ.Query object being built.\n   *\n   * @param table_name - The name of the table to modify. This must be either null (in which case\n   * the \"Add Table\" modal is displayed), or a table which the current user is associated with.\n   *\n   * @param callback - The callback that is executed after the user finishes updating selections.\n   * It is executed as callback()\n   */\n  DataQ.TableModal = function(q, table_name, callback) {\n    table = table_name;\n    cb = callback;\n    query = q;\n\n    // If the modal HTML does not exist, add it to the page.\n    var modal = $(\"#dq-table-modal\");\n    if (modal.length === 0) {\n      var html = DataQ.templates['dq-table-modal']({\n        \"table_name\": table\n      });\n      $('body').append(html);\n    }\n\n    // Display the modal (disable Esc and clicking the backdrop to exit modal)\n    $('#dq-table-modal').modal({\n      keyboard: false\n    });\n\n    // Don't allow clicking Done until the user selects a table.\n    $(\".dq-modal-done-btn\").hide();\n\n    // When the modal is shown, populate the columns.\n    $(\"#dq-table-modal\").on(\"shown.bs.modal\", function() {\n      if (table) {\n        populate_column_list(table);\n      }\n    });\n\n    // Handle modal close when clicking backdrop.\n    $(\".modal-backdrop\").click(function() {\n      $(\"#dq-table-modal\").remove();\n      $(\".modal-backdrop\").remove();\n      cb();\n    })\n  };\n\n  // If the user quits, trigger the callback.\n  $(document).on('click', '.dq-modal-quit', function() {\n    $(\"#dq-table-modal\").remove();\n    $(\".modal-backdrop\").remove();\n    cb();\n  });\n\n\n  // If the user clicks the table dropdown, populate the list with the list\n  // of available tables.\n  $(document).on(\"click\", \".dq-modal-dropdown-btn\", function() {\n    var dropdown = $(\".dq-modal-dropdown\");\n    dropdown.html(\"\");\n    DataQ.API.get_tables(query.repo(), function(data) {\n      data.tables.forEach(function(table) {\n        var html = DataQ.templates[\"dq-modal-dropdown-item\"]({\n          \"item_name\": table\n        });\n        dropdown.append(html);\n      }); // end foreach\n    }) // get_tables\n  }); // document on click\n\n\n  // When a table is selected from the dropdown, create the column list.\n  $(document).on(\"click\", \".dq-modal-dropdown-link\", function() {\n    // Set the content of the dropdown.\n    var item_name = $(this).data(\"item_name\");\n    table = item_name;\n    $('.dq-modal-table-dropdown-text').text(table);\n    populate_column_list();\n  });\n\n  // Populate the list of columns with the schema of the given table.\n  var populate_column_list = function() {\n    // Get the schema for the selected tables.\n    DataQ.API.get_schema(query.repo(), table, function(data) {\n      $(\".dq-modal-done-btn\").show();\n\n      // Sort the columns by name.\n      query.schema(table, data.schema).sort(function(a, b) {return a[0] > b[0]});\n\n      // Create the HTML and add it to the UI.\n      var html = DataQ.templates[\"dq-modal-columns\"]({\n        \"columns\": query.schema(table)\n      });\n      $('.dq-column-list').html(html);\n\n      if (query.selected_columns(table)) {\n        // Iterate through the columns for the selected table.\n        query.selected_columns(table).forEach(function(column) {\n          // Extract the data entries from the element (we find the element by selecting\n          // .dq-modal-column[data-columnname=\"colname\"]\n          var element = $('.dq-modal-column[data-columnname=\"'+column.name+'\"]');\n          element.data(\"columnname\", column.name);\n          element.data(\"columntype\", column.type);\n          element.data(\"currentaggregate\", column.agg || \"none\")\n          element.find(\"input[type=checkbox]\").prop('checked', true);\n          if (column.agg !== \"none\") {\n            element.find(\"button\").text(column.agg + \"(\" + column.name + \")\");\n          }\n        }); // end forEach\n      } // if selected columns\n    });\n  };\n\n  // Handle column aggregate trigger.\n  $(document).on(\"click\", \".dq-modal-column button\", function() {\n    // Extract the data entries.\n    var parent_li = $(this).parent();\n    var columnname = parent_li.data(\"columnname\");\n    var columntype = parent_li.data(\"columntype\");\n    var currentaggregate = parent_li.data(\"currentaggregate\")\n\n    // Compute the next aggregate operator to apply.\n    var nextaggregate = DataQ.next_aggregate(columntype, currentaggregate);\n\n    // If an aggregate has already been applied, don't apply another.\n    if (query.operated_column() !== table + \".\" + columnname && query.operated_column() !== null) {\n      nextaggregate = \"none\";\n    }\n\n    // If the aggregate has been turned off, turn off the operated column.\n    // Else if this is the new operated column, indicate so.\n    if (nextaggregate === \"none\") {\n      if (query.operated_column() === table + \".\" + columnname) {\n        query.operated_column(null);\n      }\n      $(this).text(columnname);\n    } else {\n      $(this).text(nextaggregate + \"(\" + columnname + \")\");\n      query.operated_column(table + \".\" + columnname);\n    }\n    parent_li.data(\"currentaggregate\", nextaggregate);\n  });\n\n  // When this is clicked, return the selected columns.\n  $(document).on(\"click\", \".dq-modal-done-btn\", function() {\n    // Figure out the selected columns.\n    var columns = [];\n    var is_op_col_checked = false;\n\n    // Iterate through each of the columns.\n    $('.dq-modal-column').each(function() {\n      var li = $(this);\n\n      // If the column is checked.\n      if (li.find(\"input\").is(\":checked\")) {\n\n        // Extract the data entries.\n        var agg = li.data(\"currentaggregate\");\n        var type = li.data(\"columntype\");\n        var name = li.data(\"columnname\");\n\n        // If the operated column has been selected, then mark it so.\n        if (table + \".\" + name === query.operated_column()) {\n          is_op_col_checked = true;\n        }\n\n        if (agg === null || agg === undefined) {\n          agg = \"none\";\n        }\n\n        columns.push({\n          \"name\": name,\n          \"type\": type,\n          \"agg\": agg\n        });\n\n      }\n    });\n\n    // If the operated column should be in this table and has not been selected,\n    // set the operated column as null.\n    if (query.operated_column() &&\n        query.operated_column().split(\".\")[0] === table &&\n        !is_op_col_checked) {\n      query.operated_column(null);\n    }\n\n    // Mark the selected columns for this table, and recompute the tables.\n    query.selected_columns(table, columns);\n    query.update_grouping();\n\n    // Remove the modals from the page.\n    $(\"#dq-table-modal\").remove();\n    $(\".modal-backdrop\").remove();\n    cb();\n  });\n\n})();\n"],"sourceRoot":"/source/"}